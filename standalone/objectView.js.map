{
  "version": 3,
  "sources": ["../src/index.js", "../src/tools.js", "../src/class/privateMethods.js", "../src/class/ObjectViewHTML.js"],
  "sourcesContent": ["import { ObjectViewHTML, toHTML } from \"./class/ObjectViewHTML\";\r\nimport { defineMapable } from \"./tools\";\r\n\r\n\r\n\r\nexport default toHTML;\r\nexport {\r\n    toHTML,\r\n    ObjectViewHTML,\r\n    defineMapable\r\n}", "export const isStr = any=>typeof any === \"string\";\r\nexport const isFce = any=>typeof any === \"function\";\r\nexport const isArr = any=>Array.isArray(any);\r\nexport const isDate = any=>any instanceof Date;\r\nexport const isObj = any=>(any != null && any.constructor === Object);\r\nexport const isImg = url=>/\\.(jpg|jpeg|png|gif|webp|bmp|svg|ico|apng|avif)$/.test(url.pathname);\r\n\r\nexport const toFce = (any, customDef=false, defVal)=>isFce(any) ? any : isFce(customDef) ? customDef : customDef ? ()=>def : ()=>{};\r\n\r\nexport const parseURL = any=>{ try { return new URL(any); } catch(e) { } }\r\n\r\nexport const isNum = any=>typeof any === \"number\" && !isNaN(any);\r\nexport const toNum = (any, def=0)=>isNum(any) ? any : def;\r\nexport const maxNum = (...n)=>Math.max(...n.filter(isNum));\r\nexport const minNum = (...n)=>Math.min(...n.filter(isNum));\r\nexport const frameNum = (any, min, max)=>maxNum(min, minNum(max, any));\r\n\r\nconst _mapables = [];\r\n\r\nexport const defineMapable = ({ name, check, entries, get })=>{\r\n    if (!isFce(check)) { throw new Error(\"check should be a function\"); }\r\n    if (!isFce(entries)) { throw new Error(\"entries should be a function\"); }\r\n    if (!isFce(get)) { throw new Error(\"get should bet a function\"); }\r\n\r\n    _mapables.push({name, check, entries, get});\r\n}\r\n\r\ndefineMapable({ name:\"Array\", check:isArr, entries:a=>a.entries(), get:(a, k)=>a[k] });\r\ndefineMapable({ name:\"Map\", check:a=>a instanceof Map, entries:a=>a.entries(), get:(a, k)=>a.get(k) });\r\ndefineMapable({ name:\"Set\", check:a=>a instanceof Set, entries:a=>a.entries(), get:(a, k)=>a.has(k) });\r\ndefineMapable({ name:\"Object\", check:isObj, entries:Object.entries, get:(a, k)=>a[k] });\r\n\r\nexport const getMapable = any=>{\r\n    if (any == null) { return; }\r\n    for (const m of _mapables) {\r\n        if (m.check(any)) { return m; }\r\n    }\r\n}\r\n\r\nexport const isMapable = any=>!!getMapable(any);\r\nexport const getKey = (any, key)=>getMapable(any)?.get(any, key);\r\nexport const getEntries = any=>getMapable(any)?.entries(any);\r\n\r\nexport const list = (entries, exe)=>{\r\n    const res = [];\r\n    for (const [key, val] of entries) {\r\n        const r = exe(val, key);\r\n        if (r !== undefined) { res.push(r); }\r\n    }\r\n    return res;\r\n}", "import { isArr, list, getKey, isMapable, getMapable } from \"../tools\";\r\n\r\n\r\nconst toTableCell = (gen, val, col, rkey, ckey)=>gen.toTableCell(toValue(gen, val), col, rkey, ckey);\r\n\r\nconst toTableRow = (gen, vals, cols, rkey)=>gen.toTableRow(cols.map((col, ckey)=>toTableCell(gen, getKey(vals, col), col, rkey, ckey)), rkey);\r\n\r\nconst toTableCol = (gen, name, key)=>gen.toTableCol(toValue(gen, name), key);\r\n\r\nconst toTableRows = (gen, rows, cols)=>gen.toTableRows(list(getMapable(rows).entries(rows), (vals, key)=>toTableRow(gen, vals, cols, key)));\r\n\r\nconst toTableCols = (gen, cols)=>gen.toTableCols(cols.map((name, key)=>toTableCol(gen, name, key)));\r\n\r\nconst toTable = (gen, rows, cols)=>gen.toTable(toTableCols(gen, cols), toTableRows(gen, rows, cols));\r\n\r\nconst toListItem = (gen, item, key, map)=>gen.toListItem(toValue(gen, item), key, map);\r\n\r\nconst toListKey = (gen, name, map)=>map === \"Set\" ? gen.toBlank() :  gen.toListKey(toValue(gen, name), map);\r\n\r\nconst toListRow = (gen, item, key, map)=>gen.toListRow(toListKey(gen, key, map), toListItem(gen, item, key, map), key, map);\r\n\r\nconst toList = (gen, pairs)=>{\r\n    const m = getMapable(pairs);\r\n    return gen.toList(list(m.entries(pairs), (item, key)=>toListRow(gen, item, key, m.name)), m.name);\r\n}\r\n\r\nconst fetchArrayColumns = (gen, arr)=>{\r\n    if (!isArr(arr)) { return; }\r\n\r\n    const cols = [];\r\n    const stat = new Map();\r\n\r\n    for (const k in arr) {\r\n        const first = k === \"0\";\r\n        const any = arr[k];\r\n        const m = getMapable(any);\r\n\r\n        if (!m) { return; }\r\n\r\n        for (const [k, v] of m.entries(any)) {\r\n            const s = (stat.get(k) || 0);\r\n            if (!s) { // new column\r\n                let caption = k;\r\n                if (m.name === \"Array\" && first) { caption = v; }\r\n                cols.push(caption);\r\n            }\r\n            stat.set(k, s+1);\r\n        }\r\n    }\r\n\r\n    let colsOk = 0;\r\n    const rowsReqOk = arr.length * gen.opt.validColRatio;\r\n    for (const [_, s] of stat.entries()) {\r\n        if (s > rowsReqOk) { colsOk ++; }\r\n    }\r\n\r\n    if (colsOk > (cols.length * gen.opt.validColsRatio)) { return cols; }\r\n}\r\n\r\nexport const toValue = (gen, any)=>{\r\n    if (any == null) { return gen.toBlank(); }\r\n    if (!isMapable(any)) { return gen.toValue(any); }\r\n\r\n    const cols = fetchArrayColumns(gen, any);\r\n    return gen.toView(cols ? toTable(gen, any, cols) : toList(gen, any));\r\n\r\n}", "import { frameNum, isDate, isFce, isImg, maxNum, parseURL, toFce, toNum } from \"../tools\";\r\nimport { toValue } from \"./privateMethods\";\r\n\r\n\r\nexport class ObjectViewHTML {\r\n\r\n    static create(opt) { return new this(opt); }\r\n    static generate(any, opt) { return this.create(opt).generate(any); }\r\n\r\n    constructor(opt={}) {\r\n        this.opt = Object.freeze({\r\n            maxImgHeight:maxNum(0, toNum(opt.maxImgHeight, 100)),\r\n            maxImgWidth:maxNum(0, toNum(opt.maxImgWidth, 200)),\r\n            formatDate:toFce(opt.formatDate, d=>d.toLocaleString()),\r\n            formatNumber:toFce(opt.formatNumber, n=>n.toLocaleString()),\r\n            longTextSize:maxNum(0, toNum(opt.longTextSize, 32)),\r\n            toUnknown:toFce(opt.toUnknown),\r\n            isImg:toFce(opt.isImage, isImg),\r\n            validColsRatio:frameNum(toNum(opt.validColsRatio, .6), 0, 1),\r\n            validColRatio:frameNum(toNum(opt.validColRatio, .6), 0, 1)\r\n        });\r\n    }\r\n\r\n    toView(content) { return `<div class=\"View\">${content}</div>`; }\r\n\r\n    toList(items, mapType) {\r\n        return `<table class=\"List\" style=\"border-collapse: collapse;\" data-maptype=\"${mapType}\"><tbody>${items.join(\"\")}</tbody></table>`;\r\n    }\r\n\r\n    toListRow(key, item, rowKey) {\r\n        return `<tr class=\"ListRow\" data-rowkey=\"${rowKey}\">${key}${item}</tr>`;\r\n    }\r\n\r\n    toListKey(key) {\r\n        return `<td class=\"ListKey\" style=\"font-weight:bold; vertical-align:top; padding:2px 10px\">${key}</td>`;\r\n    }\r\n\r\n    toListItem(item, key) {\r\n        return `<td class=\"ListItem\" data-key=\"${key}\" style=\"vertical-align:top; padding:2px 10px; border:1px solid black;\">${item}</td>`;\r\n    }\r\n\r\n    toTable(cols, rows) {\r\n        return `<table class=\"Table\" style=\"border-collapse: collapse;\">${cols}${rows}</table>`;\r\n    }\r\n\r\n    toTableCols(cols) {\r\n        return `<thead class=\"TableCols\"><tr>${cols.join(\"\")}</tr></thead>`;\r\n    }\r\n\r\n    toTableCol(col, colKey) {\r\n        return `<th class=\"TableCol\" data-colkey=\"${colKey}\">${col}</th>`;\r\n    }\r\n\r\n    toTableRows(rows) {\r\n        return `<tbody class=\"TableRows\">${rows.join(\"\")}</tbody>`;\r\n    }\r\n\r\n    toTableRow(values, rowKey) {\r\n        return `<tr class=\"TableRow\" data-rowkey=\"${rowKey}\">${values.join(\"\")}</tr>`;\r\n    }\r\n\r\n    toTableCell(value, col, rowKey, colKey) {\r\n        return `<td class=\"TableCell\" data-col=\"${col}\" data-key=\"${rowKey}:${colKey}\" style=\"vertical-align:top; padding:2px 10px; border:1px solid black;\">${value}</td>`;\r\n    }\r\n\r\n    toValue(any) {\r\n        if (isDate(any)) { return this.toDate(any); }\r\n\r\n        const { toUnknown, isImg, longTextSize, maxImgHeight, maxImgWidth } = this.opt;\r\n        \r\n        const t = typeof any;\r\n        if (t === \"number\" || t === \"bigint\") { return this.toNumber(any); }\r\n        if (t === \"boolean\") { return this.toBoolean(any); }\r\n        if (t !== \"string\" && !t.hasOwnProperty(\"toString\")) { return toUnknown(any); }\r\n\r\n        any = String(any);\r\n        const url = parseURL(any);\r\n\r\n        if (url && isImg(url)) { return this.toHref(url, this.toImg(url, any, maxImgHeight, maxImgWidth)); }\r\n\r\n        const text = any.length >= longTextSize ? this.toLongText(any, longTextSize) : this.toText(any);\r\n        \r\n        return url ? this.toHref(url, text) : text;\r\n    }\r\n\r\n    toBlank() { return \"\"; }\r\n    toNumber(value) { return this.opt.formatNumber(value); }\r\n    toDate(date) { return this.opt.formatDate(date); }\r\n\r\n    toBoolean(value) { return `<input type=\"checkbox\" ${value ? \"checked\" : \"\"} style=\"pointer-events:none\">`; }\r\n\r\n    toImg(url, value, maxHeight, maxWidth) {\r\n        return `<img alt=\"${url.ref}\" src=\"${url.href}\" title=\"${value}\" style=\"max-height:${maxHeight}px; max-width:${maxWidth}px\"/>`;\r\n    }\r\n    toHref(url, content) { return `<a href=${url.href} target=\"_blank\">${content}</a>`;}\r\n\r\n    toText(str) { return `<span>${str}</span>`; }\r\n    toLongText(str, limit) { return `<span title=\"${str}\">${str.substring(0, limit) + \"...\"}</span>`; }\r\n\r\n    generate(any) { return toValue(this, any); }\r\n\r\n}\r\n\r\nexport const toHTML = (any, opt)=>ObjectViewHTML.generate(any, opt);"],
  "mappings": "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",
  "names": ["def", "k", "isImg"]
}
